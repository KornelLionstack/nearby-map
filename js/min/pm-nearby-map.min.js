window.nearby_map = window.nearby_map || {}; window.nearby_map_object = window.nearby_map_object || {}; // Avoid clobbering the built-in "origin" property on the window object. // Store origin coordinates in a custom global instead. window.nearby_origins = window.nearby_origins || {}; document.addEventListener('DOMContentLoaded', function () { // Find all proximity buttons regardless of the map id const buttons = document.querySelectorAll('[class*="proximity_place_"]'); const ajaxUrl = typeof ajaxurl !== 'undefined' ? ajaxurl : (typeof cspm_nearby_map !== 'undefined' ? cspm_nearby_map.ajax_url : '/wp-admin/admin-ajax.php'); buttons.forEach(button => { button.addEventListener('click', function () { const typeLabel = this.dataset.proximityName; const mapId = this.dataset.mapId; const slug = slugify(typeLabel); fetch(ajaxUrl + '?action=get_custom_nearby_locations') .then(response => response.json()) .then(locations => { const filtered = locations.filter(loc => slugify(loc.type) === slug); if (filtered.length === 0) { console.warn(`Nincs találat a '${slug}' slug-hoz.`); } displayMarkersOnMap(filtered, mapId); }) .catch(err => console.error('Helyek betöltésekor hiba történt:', err)); }); }); function slugify(text) { const accentsMap = new Map([ ['á','a'],['é','e'],['í','i'],['ó','o'],['ö','o'],['ő','o'],['ú','u'],['ü','u'],['ű','u'], ['Á','a'],['É','e'],['Í','i'],['Ó','o'],['Ö','o'],['Ő','o'],['Ú','u'],['Ü','u'],['Ű','u'] ]); let slug = text.toLowerCase().split('').map(char => accentsMap.get(char) || char).join(''); return slug.replace(/[\s\-]+/g, '_').replace(/[^a-z0-9_]/g, '').trim(); } function displayMarkersOnMap(locations, mapId) { const elementId = 'codespacing_progress_map_' + mapId; const mapElement = document.getElementById(elementId); if (!mapElement) return console.error(`Nem található a térkép elem: ${elementId}`); const lat = parseFloat(mapElement.dataset.lat || 47.4555962); const lng = parseFloat(mapElement.dataset.lng || 19.0435047); const zoom = parseInt(mapElement.dataset.zoom || 13); const map = new google.maps.Map(mapElement, { center: { lat, lng }, zoom: zoom, mapTypeId: 'roadmap' }); // expose the created map for inline scripts that expect these globals window.nearby_map[mapId] = map; window.nearby_map_object[mapId] = map; window.nearby_origins[mapId] = new google.maps.LatLng(lat, lng); const directionsService = new google.maps.DirectionsService(); const directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: true }); directionsRenderer.setMap(map); const infoWindow = new google.maps.InfoWindow(); const markerBase = typeof cspm_nearby_map !== 'undefined' && cspm_nearby_map.place_markers_file_url ? cspm_nearby_map.place_markers_file_url : ''; locations.forEach(loc => { const icon = markerBase ? { url: markerBase + slugify(loc.type) + '.svg', scaledSize: new google.maps.Size(40, 40) } : null; const marker = new google.maps.Marker({ position: { lat: loc.lat, lng: loc.lng }, map: map, title: loc.name, ...(icon ? { icon } : {}) }); marker.addListener('click', () => { const travelModes = [ { mode: google.maps.TravelMode.DRIVING, label: 'Autóval' }, { mode: google.maps.TravelMode.WALKING, label: 'Gyalog' }, { mode: google.maps.TravelMode.TRANSIT, label: 'Tömegközlekedéssel' } ]; Promise.all(travelModes.map(({ mode, label }) => { return new Promise(resolve => { directionsService.route({ origin: window.nearby_origins[mapId], destination: { lat: loc.lat, lng: loc.lng }, travelMode: mode }, (result, status) => { if (status === 'OK') { // Render the first successful mode on the map if (!directionsRenderer.getDirections()) { directionsRenderer.setDirections(result); } const leg = result.routes[0].legs[0]; resolve({ label, distance: leg.distance.text, duration: leg.duration.text }); } else { resolve(null); } }); }); })).then(results => { const listItems = results.filter(Boolean).map(r => `<li>${r.label}: ${r.duration} (${r.distance})</li>` ).join(''); infoWindow.setContent( `<strong>${loc.name}</strong><ul>${listItems}</ul>` ); infoWindow.open(map, marker); }); }); }); } });
