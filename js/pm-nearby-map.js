/*
 * Maintain global references used by the original Progress Map scripts.
 * These arrays are normally initialised in this file and consumed by the
 * inline script generated by the plugin.
 */
window.nearby_map = window.nearby_map || {};
window.nearby_map_object = window.nearby_map_object || {};
// Avoid clobbering the built-in "origin" property on the window object.
// Store origin coordinates in a custom global instead.
window.nearby_origins = window.nearby_origins || {};

document.addEventListener('DOMContentLoaded', function () {
    // Find all proximity buttons regardless of the map id
    const buttons = document.querySelectorAll('[class*="proximity_place_"]');
    const backButtons = document.querySelectorAll('.cspm_back_to_nearby_cats');

    const ajaxUrl = typeof ajaxurl !== 'undefined'
        ? ajaxurl
        : (typeof cspm_nearby_map !== 'undefined'
            ? cspm_nearby_map.ajax_url
            : '/wp-admin/admin-ajax.php');

    buttons.forEach(button => {
        button.addEventListener('click', function () {
            const typeLabel = this.dataset.proximityName;
            const mapId = this.dataset.mapId;
            const slug = slugify(typeLabel);

            fetch(ajaxUrl + '?action=get_custom_nearby_locations')
                .then(response => response.json())
                .then(locations => {
                    const filtered = locations.filter(loc => slugify(loc.type) === slug);
                    if (filtered.length === 0) {
                        console.warn(`Nincs találat a '${slug}' slug-hoz.`);
                    }
                    displayMarkersOnMap(filtered, mapId);
                    showPlacesList(filtered, mapId, typeLabel, slug);
                })
                .catch(err => console.error('Helyek betöltésekor hiba történt:', err));
        });
    });

    backButtons.forEach(btn => {
        btn.addEventListener('click', function(){
            const mapId = this.dataset.mapId;
            const list = document.getElementById('cspm_nearby_places_list_' + mapId);
            if(list) list.style.display = 'none';
            document.querySelectorAll('.proximity_place_' + mapId).forEach(el => el.style.display = 'inline-block');
            displayMarkersOnMap([], mapId);
        });
    });

    // Display a marker at the map's center/origin once the map is fully loaded
    window.addEventListener('load', function () {
        if (typeof nearby_map_object !== 'undefined' && typeof nearby_origins !== 'undefined') {
            Object.keys(nearby_map_object).forEach(function (mapId) {
                const map = nearby_map_object[mapId];
                const origin = nearby_origins[mapId];
                if (map && origin) {
                    const iconUrl =
                        typeof cspm_nearby_map !== 'undefined' && cspm_nearby_map.geoloc_marker_url
                            ? cspm_nearby_map.geoloc_marker_url
                            : null;

                    const markerOpts = { position: origin, map: map };
                    if (iconUrl) {
                        markerOpts.icon = { url: iconUrl, scaledSize: new google.maps.Size(40, 40) };
                    }

                    new google.maps.Marker(markerOpts);
                }
            });
        }
    });

    function slugify(text) {
        const accentsMap = new Map([
            ['á','a'],['é','e'],['í','i'],['ó','o'],['ö','o'],['ő','o'],['ú','u'],['ü','u'],['ű','u'],
            ['Á','a'],['É','e'],['Í','i'],['Ó','o'],['Ö','o'],['Ő','o'],['Ú','u'],['Ü','u'],['Ű','u']
        ]);
        let slug = text.toLowerCase().split('').map(char => accentsMap.get(char) || char).join('');
        return slug.replace(/[\s\-]+/g, '_').replace(/[^a-z0-9_]/g, '').trim();
    }

    const iconSlugMap = {
        'kozlekedes': 'kozlekedés',
        'ettermek': 'ttermek',
        'ejszakai_elet_klub': 'ejszakai_elet'
    };

    function iconFile(slug) {
        return iconSlugMap[slug] || slug;
    }

    function showPlacesList(locations, mapId, label, slug) {
        const wrapper = document.getElementById('cspm_nearby_places_list_' + mapId);
        if (!wrapper) return;

        wrapper.style.display = 'block';
        const markerBase = typeof cspm_nearby_map !== 'undefined' && cspm_nearby_map.place_markers_file_url ? cspm_nearby_map.place_markers_file_url : '';
        const listIconBase = markerBase;
        const headerImg = wrapper.querySelector('.cspm_nearby_cat_list_img');
        if (headerImg) headerImg.src = listIconBase + iconFile(slug) + '.svg';
        const headerName = wrapper.querySelector('.cspm_nearby_cat_list_name');
        if (headerName) headerName.textContent = label;
        const countEl = wrapper.querySelector('.cspm_nbr_places_found');
        if (countEl) countEl.textContent = locations.length;

        const listContainer = wrapper.querySelector('.cspm_nearby_location_list_items_container_' + mapId);
        if (listContainer) listContainer.innerHTML = '';

        document.querySelectorAll('.proximity_place_' + mapId).forEach(el => el.style.display = 'none');


        locations.forEach(loc => {
            const item = document.createElement('div');
            item.className = 'cspm_nearby_location_list_item';
            item.innerHTML =
                `<div class="cspm_location_list_item_details">` +
                `<span class="cspm_place_name_list">${loc.name}</span>` +
                (loc.address ? `<span class="cspm_place_vicinity_list">${loc.address}</span>` : '') +
                `<div class="cspm_place_travel_info"></div>` +
                `</div>`;
            if (listContainer) listContainer.appendChild(item);

            item.addEventListener('click', () => {
                document.querySelectorAll('.cspm_nearby_location_list_item')
                    .forEach(el => el.classList.remove('active'));
                item.classList.add('active');
                displayMarkersOnMap([loc], mapId, true);
            });

            const travelEl = item.querySelector('.cspm_place_travel_info');
            if (travelEl) {
                const distanceService = new google.maps.DistanceMatrixService();
                const modes = [
                    { mode: google.maps.TravelMode.DRIVING, label: 'Autóval' },
                    { mode: google.maps.TravelMode.WALKING, label: 'Gyalog' },
                    { mode: google.maps.TravelMode.BICYCLING, label: 'Kerékpárral' },
                    { mode: google.maps.TravelMode.TRANSIT, label: 'Tömegközlekedéssel' }
                ];
                let pending = modes.length;
                const results = [];

                modes.forEach(m => {
                    distanceService.getDistanceMatrix({
                        origins: [window.nearby_origins[mapId]],
                        destinations: [{ lat: loc.lat, lng: loc.lng }],
                        travelMode: m.mode
                    }, (response, status) => {
                        if (status === 'OK' && response.rows[0].elements[0].status === 'OK') {
                            const el = response.rows[0].elements[0];
                            results.push(`${m.label}: ${el.duration.text} (${el.distance.text})`);
                        }
                        if (--pending === 0) {
                            const googleMapText =
                                typeof cspm_nearby_map !== 'undefined'
                                    ? cspm_nearby_map.google_map_link_text
                                    : 'Megnyitás Google Térképen';
                            const gmapsLink =
                                `https://www.google.com/maps/dir/?api=1&origin=${window.nearby_origins[mapId].lat()},${window.nearby_origins[mapId].lng()}&destination=${loc.lat},${loc.lng}`;

                            travelEl.innerHTML =
                                results.join('<br>') +
                                `<br><a href="${gmapsLink}" target="_blank" rel="noopener" class="cspm-gmaps-button">${googleMapText}</a>`;
                        }
                    });
                });
            }
        });
    }

    function displayMarkersOnMap(locations, mapId, openFirst = false) {
        const elementId = 'codespacing_progress_map_' + mapId;
        const mapElement = document.getElementById(elementId);
        if (!mapElement) return console.error(`Nem található a térkép elem: ${elementId}`);

        const lat = parseFloat(mapElement.dataset.lat || 47.4555962);
        const lng = parseFloat(mapElement.dataset.lng || 19.0435047);
        const zoom = parseInt(mapElement.dataset.zoom || 13);

        const map = new google.maps.Map(mapElement, {
            center: { lat, lng },
            zoom: zoom,
            mapTypeId: 'roadmap'
        });

        // expose the created map for inline scripts that expect these globals
        window.nearby_map[mapId] = map;
        window.nearby_map_object[mapId] = map;
        window.nearby_origins[mapId] = new google.maps.LatLng(lat, lng);

        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer({
            suppressMarkers: true
        });
        directionsRenderer.setMap(map);

        const infoWindow = new google.maps.InfoWindow();

        // draw origin marker each time
        const originMarkerOpts = { position: { lat, lng }, map: map };
        if (typeof cspm_nearby_map !== 'undefined' && cspm_nearby_map.geoloc_marker_url) {
            originMarkerOpts.icon = { url: cspm_nearby_map.geoloc_marker_url, scaledSize: new google.maps.Size(40,40) };
        }
        new google.maps.Marker(originMarkerOpts);

        // Clear route and info window when clicking elsewhere on the map
        map.addListener('click', () => {
            directionsRenderer.set('directions', null);
            infoWindow.close();
        });

        const markerBase =
            typeof cspm_nearby_map !== 'undefined' &&
            cspm_nearby_map.place_markers_file_url
                ? cspm_nearby_map.place_markers_file_url
                : '';

        const markers = [];
        locations.forEach(loc => {
            const iconSlug = slugify(loc.type);
            const icon = markerBase
                ? {
                    url: markerBase + iconFile(iconSlug) + '.svg',
                    scaledSize: new google.maps.Size(40, 40)
                }
                : null;
            const marker = new google.maps.Marker({
                position: { lat: loc.lat, lng: loc.lng },
                map: map,
                title: loc.name,
                ...(icon ? { icon } : {})
            });
            markers.push(marker);

            marker.addListener('click', () => {
                directionsRenderer.setMap(map);
                directionsRenderer.set('directions', null);

                directionsService.route({
                    origin: window.nearby_origins[mapId],
                    destination: { lat: loc.lat, lng: loc.lng },
                    travelMode: google.maps.TravelMode.DRIVING
                }, (result, status) => {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(result);
                    }
                });

                const distanceService = new google.maps.DistanceMatrixService();
                const modes = [
                    { mode: google.maps.TravelMode.DRIVING, label: 'Autóval' },
                    { mode: google.maps.TravelMode.WALKING, label: 'Gyalog' },
                    { mode: google.maps.TravelMode.BICYCLING, label: 'Kerékpárral' },
                    { mode: google.maps.TravelMode.TRANSIT, label: 'Tömegközlekedéssel' }
                ];

                const results = [];
                let pending = modes.length;

                modes.forEach(m => {
                    distanceService.getDistanceMatrix({
                        origins: [window.nearby_origins[mapId]],
                        destinations: [{ lat: loc.lat, lng: loc.lng }],
                        travelMode: m.mode
                    }, (response, status) => {
                        if (status === 'OK' &&
                            response.rows[0].elements[0].status === 'OK') {
                            const element = response.rows[0].elements[0];
                            results.push(`${m.label}: ${element.duration.text} (${element.distance.text})`);
                        }
                        pending--;
                        if (pending === 0) {
                            const googleMapText =
                                typeof cspm_nearby_map !== 'undefined'
                                    ? cspm_nearby_map.google_map_link_text
                                    : 'Megnyitás Google Térképen';
                            const gmapsLink =
                                `https://www.google.com/maps/dir/?api=1&origin=${window.nearby_origins[mapId].lat()},${window.nearby_origins[mapId].lng()}&destination=${loc.lat},${loc.lng}`;

                            infoWindow.setContent(
                                `<strong>${loc.name}</strong><br>` +
                                results.join('<br>') +
                                `<br><a href="${gmapsLink}" target="_blank" rel="noopener" class="cspm-gmaps-button">${googleMapText}</a>`
                            );
                            infoWindow.open(map, marker);
                        }
                    });
                });
            });
        });

        if (openFirst && markers.length > 0) {
            google.maps.event.addListenerOnce(map, 'idle', () => {
                google.maps.event.trigger(markers[0], 'click');
            });
        }

        return { map, markers };
    }
});
